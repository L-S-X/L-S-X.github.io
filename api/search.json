[{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"极客园H5项目【项目准备】\n资料\n接口文档：http://geek.itheima.net/\n\n\n\n项目准备-项目介绍目标：了解项目定位和功能\n\n极客园 H5 端项目：个人自媒体前台\n\n\n\n\n\n\n\n\n\n\n「极客园」对标CSDN、博客园等竞品，致力成为更加贴近年轻 IT 从业者（学员）的科技资讯类应用产品关键词：IT、极客、活力、科技、技术分享、前沿动态、内容社交用户特点：年轻有活力，对IT领域前言科技信息充满探索欲和学习热情\n\n项目功能和演示，包括\n\n短信登录、退出\n首页-频道管理，文章列表，更多操作\n文章详情-文章详情，文章评论，评论回复，点赞，收藏，关注\n个人中心-个人资料展示，个人资料编辑\n\n\n技术栈：\n\n项目搭建：React 官方脚手架 create-react-app\nreact hooks\n状态管理：redux\nUI 组件库：antd-mobile\najax请求库：axios\n路由：react-router-dom 以及 history\nCSS 预编译器：sass\nCSS Modules 避免组件之间的样式冲突\nTypeScript\n工具库：lodash\nhooks 库：ahooks\nwebsocket 即时通讯\n\n\n\n项目准备-项目搭建目标：能够基于脚手架搭建支持TypeScript的项目步骤：\n\n使用 React CLI 搭建项目：npx create-react-app geek-h5-sh90 --template typescript\n进入项目根目录：cd geek-h5-sh90\n启动项目：yarn start\n调整项目目录结构：\n\n&#x2F;src\n  &#x2F;assets         项目资源文件，比如，图片 等\n  &#x2F;components     通用组件\n  &#x2F;pages          页面\n  &#x2F;store          Redux 状态仓库\n  &#x2F;types          TS 类型，包括：接口、redux等类型\n  &#x2F;utils          工具，比如，token、axios 的封装等\n  App.scss        根组件样式文件\n  App.tsx         根组件\n  index.scss      全局样式\n  index.tsx       项目入口\n\n核心代码：\n安装解析 sass 的包：\nyarn add sass\n\n修改src/index.tsx 中：\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './App'\n\nReactDOM.render(&lt;App />, document.getElementById('root'))\n\n修改src/index.scss 中：\nhtml,\nbody &#123;\n  margin: 0;\n  padding: 0;\n&#125;\n\nhtml,\nbody,\n#root &#123;\n  height: 100%;\n&#125;\n\np,\nh2,\nh3 &#123;\n  margin: 0;\n&#125;\n\n修改src/App.tsx 中：\nimport './App.scss'\n\nfunction App() &#123;\n  return &lt;div className=\"app\">&lt;/div>\n&#125;\n\nexport default App\n\n修改src/App.scss 中：\n.app &#123;\n  height: 100%;\n&#125;\n\n项目准备-使用git/gitee管理项目目标：能够将项目推送到 gitee 远程仓库步骤：\n\n在项目根目录打开终端，并初始化 git 仓库（如果已经有了 git 仓库，无需重复该步），命令：git init\n添加项目内容到暂存区：git add .\n提交项目内容到仓库区：git commit -m 项目初始化\n添加 remote 仓库地址：git remote add origin [gitee 仓库地址]\n将项目内容推送到 gitee：git push origin master -u\n\n项目准备-配置基础路由目标：能够配置登录页面的路由并显示在页面中步骤：\n\n安装路由：yarn add react-router-dom@5.3.0 和路由的类型声明文件 yarn add @types/react-router-dom -D\n在 pages 目录中创建两个文件夹：Login、Layout\n分别在两个目录中创建 index.tsx 文件，并创建一个简单的组件后导出\n在 App 组件中，导入路由组件以及两个页面组件\n配置 Login 和 Layout 的路由规则\n\n核心代码：\npages/Login/index.tsx 中：\nconst Login = () => &#123;\n  return &lt;div>登录页面&lt;/div>\n&#125;\nexport default Login\n\npages/Layout/index.tsx中：\nexport default function Layout() &#123;\n  return &lt;div>布局组件&lt;/div>\n&#125;\n\n\nApp.tsx 中：\n// 导入路由\nimport &#123; BrowserRouter as Router, Route &#125; from 'react-router-dom'\n\n// 导入页面组件\nimport Login from './pages/Login'\nimport Layout from './pages/Layout'\n\n// 配置路由规则\nfunction App() &#123;\n  return (\n    &lt;Router>\n      &lt;div className=\"app\">\n        &lt;Route path=\"/home\">\n          &lt;Layout />\n        &lt;/Route>\n        &lt;Route path=\"/login\">\n          &lt;Login />\n        &lt;/Route>\n      &lt;/div>\n    &lt;/Router>\n  )\n&#125;\n\nexport default App\n\n项目准备-默认展示首页内容目标：能够在打开页面时就展示首页内容\n分析说明：\n匹配默认路由，进行重定向\n\nRoute render prop\nRoute 的 render 属性：用来内联渲染任意内容\n\n步骤：\n\n在 App.tsx 中添加一个新的 Route，用来匹配默认路由\n为 Route 组件添加 render 属性，用来渲染自定义内容\n在 render 中，渲染 Redirect 实现路由重定向\n\n核心代码：\nApp.tsx 中：\nimport &#123; Redirect &#125; from 'react-router-dom'\n\n&lt;Route exact path=\"/\" render=&#123;() => &lt;Redirect to=\"/home\" />&#125; />\n\n总结：\n\nRoute 通过哪个属性来渲染自定义内容？\n通过哪个组件来实现路由重定向？\n\n项目准备-antd-mobile组件库antd-mobile 文档\n\n\n\n\n\n\n\n\n\nantd-mobile 是 Ant Design 的移动规范的 React 实现，服务于蚂蚁及口碑无线业务。开箱即用\n目标：能够使用 antd-mobile 的 Button 组件渲染按钮步骤：\n\n安装 antd 组件库：yarn add antd-mobile@next\n导入 Button 组件\n在 Login 页面渲染 Button 组件\n\n核心代码：\npages/Login/index.tsx 中：\nimport &#123; Button &#125; from 'antd-mobile'\n\nconst Login = () => (\n  &lt;div>\n    &lt;Button color=\"primary\">Button&lt;/Button>\n  &lt;/div>\n)\n\n项目准备-原生CSS变量目标：能够使用原始CSS变量内容：\n\nMDN - CSS变量（自定义属性）\n\nCSS 自定义属性，通常称为 CSS 变量。类似于 JS 中声明的变量，可以复用 CSS 属性值。比如：\n/* \n  比如，项目中多次使用某一个颜色值，原来需要重复写多次\n*/\n.list-item-active &#123;\n  color: #fc6627;\n&#125;\n\n.tabs-item-active &#123;\n  color: #fc6627;\n&#125;\n\n/* \n  使用 CSS 变量来实现复用\n*/\n\n/* 1 创建全局 CSS 变量 --geek-color-primary*/\n:root &#123;\n  --geek-color-primary: #fc6627;\n&#125;\n/* 2 复用 */\n.list-item-active &#123;\n  color: var(--geek-color-primary);\n&#125;\n\n.tabs-item-active &#123;\n  color: var(--geek-color-primary);\n&#125;\n\n\n特点：\n\n可复用\n语义化，--geek-color-primary 比 #fc6627 更容易让人理解\n\n\n根据 CSS 变量的作用域，分为两种：\n\n全局 CSS 变量：全局有效\n局部 CSS 变量：只在某个作用域内（比如，某个类名中）有效\n\n\n\n/*\n  全局 CSS 变量\n  1. 使用 :root 这个 CSS 伪类匹配文档树的根元素 html。可以在CSS文件的任意位置使用该变量\n     相当于 JS 变量中的全局\n  2. CSS 变量通过两个减号（--）开头，多个单词之间推荐使用 - 链接。CSS 变量名可以是任意变量名\n*/\n:root &#123;\n  --geek-color-primary: #fc6627;\n&#125;\n/* 使用 */\n.tabs-item-active &#123;\n  color: var(--geek-color-primary);\n&#125;\n.list-item-active &#123;\n  color: var(--geek-color-primary);\n&#125;\n\n/* \n  局部 CSS 变量\n*/\n.list &#123;\n  --active-color: #1677ff;\n\n  /* 在该 类 内部使用改变量 */\n  color: var(--active-color);\n&#125;\n.test &#123;\n  color: var(--active-color); /* 错误演示：无效！效果与不使用该变量时一致*/\n&#125;\n\n项目准备-组件库antd-mobile主题定制\nantd-mobile 主题\n\n目标：能够使用原生CSS变量来定制极客园项目的主题核心代码：\nsrc/index.scss 中：\n:root:root &#123;\n  --adm-color-primary: #fc6627;\n  --adm-color-success: #00b578;\n  --adm-color-warning: #ff8f1f;\n  --adm-color-danger: #ff3141;\n  --adm-color-white: #ffffff;\n  --adm-color-weak: #999999;\n  --adm-color-light: #cccccc;\n  --adm-border-color: #eeeeee;\n  --adm-font-size-main: 13px;\n  --adm-color-text: #333333;\n&#125;\n\n\n项目准备-配置路径别名自定义 CRA 的默认配置craco 配置文档\n目标：能够配置@路径别名简化路径处理步骤：\n\n安装修改 CRA 配置的包：yarn add -D @craco/craco\n在项目根目录中创建 craco 的配置文件：craco.config.js，并在配置文件中配置路径别名\n修改 package.json 中的脚本命令\n在代码中，就可以通过 @ 来表示 src 目录的绝对路径\n重启项目，让配置生效\n\n核心代码：\n/craco.config.js 中：\nconst path = require('path')\n\nmodule.exports = &#123;\n  // webpack 配置\n  webpack: &#123;\n    // 配置别名\n    alias: &#123;\n      // 约定：使用 @ 表示 src 文件所在路径\n      '@': path.resolve(__dirname, 'src'),\n      '@scss': path.resolve(__dirname, 'src', 'assets', 'styles')\n    &#125;,\n  &#125;,\n&#125;\n\n\npackage.json 中：\n// 将 start/build/test 三个命令修改为 craco 方式\n\n\"scripts\": &#123;\n  \"start\": \"craco start\",\n  \"build\": \"craco build\",\n  \"test\": \"craco test\",\n  \"eject\": \"react-scripts eject\"\n&#125;,\n\n项目准备-@别名路径提示目标：能够让vscode识别@路径并给出路径提示分析说明：\n因为项目使用了 TS，而 TS 带有配置文件 tsconfig.json。因此，不需要再使用 jsconfig.json（实际上，jsconfig.json 是参考 tsconfig.json 的）\nVSCode 会自动读取 tsconfig.json 中的配置，让 vscode 知道 @ 就是 src 目录\n步骤：\n\n创建 path.tsconfig.json 配置文件\n在该配置文件中添加以下配置\n在 tsconfig.json 中导入该配置文件，让配置生效\n\n核心代码：\n/path.tsconfig.json 中：\n&#123;\n  \"compilerOptions\": &#123;\n    \"baseUrl\": \"./\",\n    \"paths\": &#123;\n      \"@/*\": [\"src/*\"]\n    &#125;\n  &#125;\n&#125;\n\n/tsconfig.json 中：\n&#123;\n  // 导入配置文件\n  \"extends\": \"./path.tsconfig.json\",\n&#125;\n\n项目准备-移动端适配目标：能跟通过配置实现自动适配移动端项目分析说明： \n适配概述\n\n为什么要适配？\n为了让我们开发的移动端项目页面，在不同尺寸大小的移动端设备（手机）中，保持相同的比例\n\n\n适配原理\n选择某个手机的尺寸大小作为基准，其他手机进行等比例缩放\n一般选择 iPhone 6（2倍屏幕），屏幕宽度为：375px\n\n\n适配方式\nrem：需要手动修改 html 元素的 font-size；额外设置 body 元素的字体大小为正常值\nvw：一 1 vw 等于屏幕宽度的 1%  \nvh: 屏幕高度的1%\n\n\n\n步骤：\n\npostcss-px-to-viewport 文档\n\n\n安装 px 转 vw 的包：yarn add -D postcss-px-to-viewport\n包的作用：将 px 转化为 vw，所以有了该工具，只需要在代码中写 px 即可\n\n\n在 craco.config.js 添加相应配置\n重启项目，让配置生效\n\n核心代码：\n/craco.config.js 中：\nconst pxToViewport = require('postcss-px-to-viewport')\nconst vw = pxToViewport(&#123;\n  // 视口宽度，一般就是 375（ 设计稿一般采用二倍稿，宽度为 375 ）\n  viewportWidth: 375\n&#125;)\n\nmodule.exports = &#123;\n  // 此处省略 webpack 配置\n  webpack: &#123;&#125;,\n\n  style: &#123;\n    postcss: &#123;\n      plugins: [vw]\n    &#125;\n  &#125;\n&#125;\n\n项目准备-移动端 1px 像素边框\n参考 antd-mobile 的实现\n查看效果：http://hucongcong.com/demo/\n\n目标：能够展示1px像素的边框\n\n分析说明：\n\n实现原理：伪元素 + transform 缩放\n伪元素::after或::before独立于当前元素，可以单独对其缩放而不影响元素本身的缩放\n\n\n\n核心代码：\n// src/assets/styles/hairline.scss\n\n@mixin scale-hairline-common($color, $top, $right, $bottom, $left) &#123;\n  content: '';\n  position: absolute;\n  display: block;\n  z-index: 1;\n  top: $top;\n  right: $right;\n  bottom: $bottom;\n  left: $left;\n  background-color: $color;\n&#125;\n\n// 添加边框\n/* \n  用法：\n\n  // 导入\n  @import '@scss/hairline.scss';\n\n  // 在类中使用\n  .a &#123;\n    @include hairline(all, #f0f0f0);\n  &#125;\n\n*/\n@mixin hairline($direction, $color: #000, $radius: 0) &#123;\n  position: relative;\n  @if $direction == top &#123;\n    border-top: 1px solid $color;\n\n    // min-resolution 用来检测设备的最小像素密度\n    @media (-webkit-min-device-pixel-ratio: 2), (min-device-pixel-ratio: 2) &#123;\n      border-top: none;\n\n      &amp;::before &#123;\n        @include scale-hairline-common($color, 0, auto, auto, 0);\n        width: 100%;\n        height: 1px;\n        transform-origin: 50% 50%;\n        transform: scaleY(0.5);\n\n        @media (-webkit-min-device-pixel-ratio: 3),\n          (min-device-pixel-ratio: 3) &#123;\n          transform: scaleY(0.33);\n        &#125;\n      &#125;\n    &#125;\n  &#125; @else if $direction == right &#123;\n    border-right: 1px solid $color;\n\n    @media (-webkit-min-device-pixel-ratio: 2), (min-device-pixel-ratio: 2) &#123;\n      border-right: none;\n\n      &amp;::after &#123;\n        @include scale-hairline-common($color, 0, 0, auto, auto);\n        width: 1px;\n        height: 100%;\n        background: $color;\n        transform-origin: 100% 50%;\n        transform: scaleX(0.5);\n\n        @media (-webkit-min-device-pixel-ratio: 3),\n          (min-device-pixel-ratio: 3) &#123;\n          transform: scaleX(0.33);\n        &#125;\n      &#125;\n    &#125;\n  &#125; @else if $direction == bottom &#123;\n    border-bottom: 1px solid $color;\n\n    @media (-webkit-min-device-pixel-ratio: 2), (min-device-pixel-ratio: 2) &#123;\n      border-bottom: none;\n\n      &amp;::after &#123;\n        @include scale-hairline-common($color, auto, auto, 0, 0);\n        width: 100%;\n        height: 1px;\n        transform-origin: 50% 100%;\n        transform: scaleY(0.5);\n\n        @media (-webkit-min-device-pixel-ratio: 3),\n          (min-device-pixel-ratio: 3) &#123;\n          transform: scaleY(0.33);\n        &#125;\n      &#125;\n    &#125;\n  &#125; @else if $direction == left &#123;\n    border-left: 1px solid $color;\n\n    @media (-webkit-min-device-pixel-ratio: 2), (min-device-pixel-ratio: 2) &#123;\n      border-left: none;\n\n      &amp;::before &#123;\n        @include scale-hairline-common($color, 0, auto, auto, 0);\n        width: 1px;\n        height: 100%;\n        transform-origin: 100% 50%;\n        transform: scaleX(0.5);\n\n        @media (-webkit-min-device-pixel-ratio: 3),\n          (min-device-pixel-ratio: 3) &#123;\n          transform: scaleX(0.33);\n        &#125;\n      &#125;\n    &#125;\n  &#125; @else if $direction == all &#123;\n    border: 1px solid $color;\n    border-radius: $radius;\n\n    @media (-webkit-min-device-pixel-ratio: 2), (min-device-pixel-ratio: 2) &#123;\n      position: relative;\n      border: none;\n\n      &amp;::before &#123;\n        content: '';\n        position: absolute;\n        left: 0;\n        top: 0;\n        width: 200%;\n        height: 200%;\n        border: 1px solid $color;\n        border-radius: $radius * 2;\n        transform-origin: 0 0;\n        transform: scale(0.5);\n        box-sizing: border-box;\n        pointer-events: none;\n      &#125;\n    &#125;\n  &#125;\n&#125;\n\n// 移除边框\n@mixin hairline-remove($position: all) &#123;\n  @if $position == left &#123;\n    border-left: 0;\n    &amp;::before &#123;\n      display: none !important;\n    &#125;\n  &#125; @else if $position == right &#123;\n    border-right: 0;\n    &amp;::after &#123;\n      display: none !important;\n    &#125;\n  &#125; @else if $position == top &#123;\n    border-top: 0;\n    &amp;::before &#123;\n      display: none !important;\n    &#125;\n  &#125; @else if $position == bottom &#123;\n    border-bottom: 0;\n    &amp;::after &#123;\n      display: none !important;\n    &#125;\n  &#125; @else if $position == all &#123;\n    border: 0;\n    &amp;::before &#123;\n      display: none !important;\n    &#125;\n    &amp;::after &#123;\n      display: none !important;\n    &#125;\n  &#125;\n&#125;\n\n\n\n使用说明\n\n@import '~@scss/hairline.scss';\n\n// 添加边框\n@include hairline(all, #000);\n@include hairline(top, #000);\n@include hairline(left, #000);\n@include hairline(bottom, #000);\n@include hairline(right, #000);\n// 移除边框\n@include hairline-remove();\n@include hairline-remove(left);\n@include hairline-remove(right);\n@include hairline-remove(bottom);\n@include hairline-remove(top);\n\n项目准备-字体图标\n\n\n\n\n\n\n\n\nhttps://www.iconfont.cn/help/detail?spm=a313x.7781069.1998910419.d8cf4382a&amp;helptype=code\n彩色图标的使用\n目标：能够在项目中使用字体图标\n\n在 public 下 index.html head 中引入该文件\n\n&lt;!-- 字体图标地址： -->\n&lt;script src=\"//at.alicdn.com/t/font_2503709_f4q9dl3hktl.js\">&lt;/script>\n\n\n在 index.scss 中添加通过 css 代码\n\n.icon &#123;\n  width: 1em; height: 1em;\n  vertical-align: -0.15em;\n  fill: currentColor;\n  overflow: hidden;\n&#125;\n\n\n在组件中，使用：\n\n&lt;svg className=\"icon\" aria-hidden=\"true\">\n  &#123;/* 使用时，只需要将此处的 iconbtn_like_sel 替换为 icon 的名称即可*/&#125;\n  &lt;use xlinkHref=\"#iconbtn_like_sel\">&lt;/use>\n&lt;/svg>\n\n封装Icon组件目标：能够封装 Icon 图片通用组件步骤：\n\n在 components 目录中，创建 Icon/index.tsx 文件\n创建 Icon 组件，并指定 props 类型\n安装 classnames 包，处理类名\n\n核心代码： \ncomponents/Icon/index.tsx 中：\nimport classnames from 'classnames'\n\n// 组件 props 的类型\ntype Props = &#123;\n  // icon 的类型\n  type: string\n  // icon 的自定义样式\n  className?: string\n  // 点击事件\n  onClick?: () => void\n&#125;\n\nconst Icon = (&#123; type, className, onClick &#125;: Props) => &#123;\n  return (\n    &lt;svg\n      className=&#123;classnames('icon', className)&#125;\n      aria-hidden=\"true\"\n      onClick=&#123;onClick&#125;\n    >\n      &lt;use xlinkHref=&#123;`#$&#123;type&#125;`&#125;>&lt;/use>\n    &lt;/svg>\n  )\n&#125;\n\nexport default Icon\n\n","slug":"01-项目准备","date":"2022-01-12T08:18:17.848Z","categories_index":"","tags_index":"","author_index":"LiSong"},{"id":"9664945b0562f54f03173099af264118","title":"My New Post","content":"","slug":"My-New-Post","date":"2022-01-12T05:45:05.000Z","categories_index":"","tags_index":"","author_index":"LiSong"},{"id":"b9663f58f18133b35bfe243f3e916a80","title":"Hello World","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new \"My New Post\"\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n","slug":"hello-world","date":"2022-01-12T04:19:23.007Z","categories_index":"","tags_index":"","author_index":"LiSong"}]